#pedir datos al usuario
import cv2 
import matplotlib.pyplot as plt  # para hacer gráficas
import numpy as np
import matplotlib.image as mpimg
from IPython.display import display
import ipywidgets as widgets
from IPython.display import display
import math
from PIL import Image
import os 
import pandas as pd
from pandas import ExcelWriter
import xlsxwriter
from tkinter import*
import tkinter as tk
from cv2 import VideoWriter, VideoWriter_fourcc
import imageio
import glob
import os 
from PIL import Image


raiz=Tk()
raiz.title ('friendly Bike')
#raiz.iconbitmap('logom.ico')
raiz.config(bg="blue") #Cambiar color de fondo

miframe=Frame()
miframe.pack(fill='both',expand='true')
miframe.config(bg='white')
miframe.config(width='650',height='600')
miframe.config(cursor='man')
milabel=Label(miframe,text='DATOS DEL USUARIO',fg='BLUE')
milabel.place(x='10',y='10')
imagen=PhotoImage(file='man2.png')
lblimagen=Label(miframe,image=imagen,borderwidth=0)
lblimagen.place(x='700',y='100')

nom=Label(miframe,text='NOMBRE:',fg='black',bg="white")
nom.place(x='10',y='60')
Nombre=Entry(miframe)
Nombre.place(x='80',y='60')

iden=Label(miframe,text='CÉDULA:',fg='black',bg="white")
iden.place(x='10',y='100')
Cedula=Entry(miframe)
Cedula.place(x='80',y='100')

ed=Label(miframe,text='EDAD:',fg='black',bg="white")
ed.place(x='10',y='150')
Edad=Entry(miframe)
Edad.place(x='80',y='150')

sex=Label(miframe,text='GÉNERO:',fg='black',bg="white")
sex.place(x='10',y='200')

sexo1=IntVar()
masculino=Radiobutton(miframe,text='Masculino',variable=sexo1,value=0)
masculino.place(x='80',y='210')
femenino=Radiobutton(miframe,text='Femenino',variable=sexo1,value=1)
femenino.place(x='170',y='210')

lonbrazo=Label(miframe,text='Inserte longitud  de su brazo (cm):',fg='black',bg="white")
lonbrazo.place(x='10',y='300')
Lbrazo=Entry(miframe)
Lbrazo.place(x='80',y='320')
 
lonpierna=Label(miframe,text='Inserte longitud de su pierna (cm):',fg='black',bg="white")
lonpierna.place(x='10',y='350')
Lpierna=Entry(miframe)
Lpierna.place(x='80',y='370')

lonespalda=Label(miframe,text='Inserte longitud de su espalda:(cm):',fg='black',bg="white")
lonespalda.place(x='10',y='400')
Lespalda=Entry(miframe)
Lespalda.place(x='80',y='420')

lonmuslo=Label(miframe,text='Inserte longitud de su muslo (cm):',fg='black',bg="white")
lonmuslo.place(x='10',y='450')
Lmuslo=Entry(miframe)
Lmuslo.place(x='80',y='470')


lonpie=Label(miframe,text='Inserte longitud del pie (cm):',fg='black',bg="white")
lonpie.place(x='10',y='500')
Lpie=Entry(miframe)
Lpie.place(x='80',y='520')

alto=Label(miframe,text='Inserte su estatura (cm):',fg='black',bg="white")
alto.place(x='10',y='550')
Altura=Entry(miframe)
Altura.place(x='80',y='570')

def basededatos():
    global genero
    global nombre
    global cedula
    global edad
    global altura
    global lbrazo
    global lpierna
    global lespalda
    global lpie
    global lmuslo
    
    genero=str(sexo1.get())
    nombre=str(Nombre.get())
    cedula=str(Cedula.get())
    edad=str(Edad.get())
    altura=(Altura.get())
    lbrazo=(Lbrazo.get())
    lpierna=(Lpierna.get())
    lespalda=(Lespalda.get())
    lpie=(Lpie.get())
    lmuslo=(Lmuslo.get())
    
    
    archivo=open('base.txt','a')
    archivo.write(nombre+ ',' + cedula+','+edad+','+altura+','+genero+','+lbrazo+','+lpierna+','+lespalda+','+lmuslo+','+lpie+'\n')
    archivo.close()
  

    
botonguardar1=Button(miframe,text='Guardar',command=basededatos)
botonguardar1.pack()
botonguardar1.place(x='90',y='600')

imagenb=PhotoImage(file='fb4.png')
imagenc=PhotoImage(file='inscalibi.png')
flechai=PhotoImage(file='flecha.png')
imagenf=PhotoImage(file='fondofi3.png')

def vencalibracion():
    global genero
    global nombre
    global cedula
    global edad
    global altura
    global lbrazo
    global lpierna
    global lespalda
    global lpie
    global lmuslo
    
    genero=(sexo1.get())
    nombre=str(Nombre.get())
    cedula=str(Cedula.get())
    edad=str(Edad.get())
    altura=(Altura.get())
    lbrazo=(Lbrazo.get())
    lpierna=(Lpierna.get())
    lespalda=(Lespalda.get())
    lpie=(Lpie.get())
    lmuslo=(Lmuslo.get())
    
    miframe.destroy()
    vcalibracion=Frame()
    vcalibracion.pack(fill='both',expand='true')
    vcalibracion.config(bg='white')
    vcalibracion.config(width='650',height='600')
    vcalibracion.config(cursor='man')
    nombreventana3=Label(vcalibracion,text='CALIBRACIÓN',fg='BLUE')
    nombreventana3.place(x='10',y='10')
    anuncio1=Label(vcalibracion,text='Suba una foto de la bicileta con los cinco (5) marcadores ubicados como se muestra en la imagen  ',fg='black', bg="white")
    anuncio1.place(x='10',y='40')
    imagenca=Label(vcalibracion,image=imagenc,borderwidth=0)
    imagenca.place(x='100',y='220')
    linkc=Entry(vcalibracion)
    linkc.place(x='30',y='80')
    
    
    def subirimagen():
        im=str(linkc.get())
        imagc1=cv2.imread(im+'.png')
        
        print(altura)
        print(genero)
        print(nombre)
         
    botonsubir3=Button(vcalibracion,text='Subir imagen',command=subirimagen)
    botonsubir3.pack()
    botonsubir3.place(x='200',y='80')
    
    def calibracion():
        
        #calibración de posición de los marcadores en la bicicleta 

        im=str(linkc.get())
        imagc1=cv2.imread(im+'.png')
        imagc= cv2.cvtColor(imagc1, cv2.COLOR_BGR2RGB)
        plt.imshow(imagc)
        plt.show() 
   
        
        colorhsv= cv2.cvtColor(imagc, cv2.COLOR_RGB2BGR) #cambiar espacio de color  a BGR
        colorhsv= cv2.cvtColor(imagc, cv2.COLOR_BGR2Lab) # cambiar de BGR  a  Lab
     

        colorluv=colorhsv[:,:,1] # unicamente el componente 1 de el espacio de color y en x, y todos los valores (tamaño de la imagen)
        #El espacio a diferencia verdes y rojo siendo verdes los valores mas bajos 

        colorluvsize=colorluv.shape # Tamaño de la imagen 
        color=list(colorluvsize) #crear matriz 
        valid=np.zeros((color[0],color[1])) #creon una matriz de ceros del tamaño de la imagen
        a=np.zeros((color[0],color[1]))

        #Guardar la imagen como binaria (Binarizacion OTSU)
        for  x in range(color[0]):# recorrer en el eje x
            for y in range(color[1]):# recorrer en el eje y para finalmente recorrer pixel por pixel

                if colorluv[x,y]<100: #para que se quede con los tonos blancos de la imagen
                    valid[x,y]=1

                else:
                    valid[x,y]=0

        #Crear una nueva variable del tamaño de la imagen original
        imagenfinal=np.array(imagc)#np.zeros(np.shape(imag[0]),np.shape(imag[1]),np.shape(imag[2]))
        
        #Multiplico la mascara por la imagen original 
        imagenfinal[:,:,0]=valid*imagc[:,:,0]
        imagenfinal[:,:,1]=valid*imagc[:,:,1]
        imagenfinal[:,:,2]=valid*imagc[:,:,2]
        imagbgr=cv2.cvtColor(imagenfinal, cv2.COLOR_RGB2BGR)
        gris= cv2.cvtColor(imagbgr, cv2.COLOR_BGR2GRAY)

        #Función para encontrar contornos 
        #ret, thresh = cv2.threshold(gris, 0,255,0) # El tercer argumento es el valor maxVal


        ret,thresh = cv2.threshold(gris,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
        #que representa el valor que debe darse si el valor de píxel es mayor que (a veces menor que) el valor de umbral.
        im2, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        #Dibujar los contornos en la imagen 
        img_contours = imagenfinal.copy()
        img_contours = cv2.drawContours(img_contours, contours, -1, (255, 0, 0), 3)
        plt.imshow(img_contours)
        
    
        
        anuncio1=Label(vcalibracion,text="Se detectaron: {0} marcadores en la bicicleta".format(len(contours)))
        anuncio1.place(x='650',y='40')
        
        if len(contours)<5:
            anuncio2=Label(vcalibracion,text="la cantidad de marcadores detectados  en su bicicleta es menor , por favor revise el protocolo de adquisición e intente tomar de nuevo la fotografía")
            anuncio2.place(x='650',y='80')
        if len(contours)>5 :
            anuncio3=Label(vcalibracion,text="la cantidad de marcadores detectados  en su bicicleta es mayor , por favor revise el protocolo de adquisición e intente tomar de nuevo la fotografía")
            anuncio3.place(x='650',y='80')
        if len(contours)==5:
            anuncio4=Label(vcalibracion,text="la cantidad de marcadores detectados  en su bicicleta es correcta, puede continuar dando clic en el boton de siguiente")
            anuncio4.place(x='650',y='80')
            flecha=Label(vcalibracion,image=flechai)
            flecha.place(x='470',y='590')
            
        #crear vectores para guardar la posición de cada marcador(nombrar marcadores)
        global biela
        global sa
        global sp
        global manillar 
        global pdal
    
        
        biela=np.zeros((2,1))
        sa=np.zeros((2,1))
        sp=np.zeros((2,1))
        sillin1=np.zeros((2,1))
        sillint1=np.zeros((2,1))
        sillin2=np.zeros((2,1))
        sillint2=np.zeros((2,1))
        sillin3=np.zeros((2,1))
        sillint3=np.zeros((2,1))
        #buscar los centros de masa de cada contorno 
        for i in range(len(contours)): 
            
            cnt = contours[i]
            M = cv2.moments(cnt)
            cx = int(M['m10']/M['m00'])
            cy = int(M['m01']/M['m00'])


            if i==0:
                biela=(cx,cy)
        
            if i==1:
                pdal=(cx,cy)

            if i==2:
                sillint1=(cx,cy)
                sillin1[0]=cx
                sillin1[1]=cy

            if i==3:
                sillint2=(cx,cy)
                sillin2[0]=cx
                sillin2[1]=cy

            if i==4:
                sillint3=(cx,cy)
                sillin3[0]=cx
                sillin3[1]=cy

                if(sillin1[0] < sillin2[0] and sillin1[0]< sillin3[0]):
                    manillar=sillint1
                    if sillin2[0]< sillin3[0]:
                        sa=sillint2
                        sp=sillint3
                    else:
                        sa=sillint3
                        sp=sillint2

                elif (sillin2[0]< sillin1[0] and sillin2[0] < sillin3[0]): 
                    manillar=sillint2
                    if sillin1[0] < sillin3[0]:
                        sa=sillint1
                        sp=sillint3
                    else:
                        sa=sillint3
                        sp=sillint1

                elif(sillin3[0] < sillin1[0] and sillin3[0] < sillin2[0]):
                    manillar=sillint3
                    if sillin1[0]< sillin2[0]:
                        sa=sillint1
                        sp=sillint2
                    else:
                        sa=sillint2
                        sp=sillint1
        
    botoncali=Button(vcalibracion,text='INICIAR CALIBRACIÓN',command=calibracion)
    botoncali.pack()
    botoncali.place(x='300',y='150')
    
    
    def bicidatos():
        vcalibracion.destroy()
        win=Frame()
        win.pack(fill='both',expand='true')
        win.config(bg='white')
        win.config(width='650',height='600')
        win.config(cursor='man')
   
        nombreventana2=Label(win,text='DATOS BICICLETA',fg='BLUE')
        nombreventana2.place(x='10',y='10')
    
        #imagenb=PhotoImage(file='calibi.png')
        imagen1=Label(win,image=imagenb,borderwidth=0)
        imagen1.place(x='500',y='80')
    
    #Subir videos
        link=Label(win,text='Subir el link del video frontal:',fg='black',bg="white")
        link.place(x='10',y='60')
        linke=Entry(win)
        linke.place(x='200',y='60')
    
    
    
        links=Label(win,text='Subir el link del video sagital:',fg='black',bg="white")
        links.place(x='10',y='120')
        linkes=Entry(win)
        linkes.place(x='200',y='120')
    
    
        titulo=Label(win,text='SELECCIONE LAS CARACTERÍSTICA DE SU BICICLETA',fg='black',bg="white",font='Helvetica 12 bold')
        titulo.place(x='60',y='300')

        tisillin=Label(win,text='TIPO DE SILLÍN:',fg='black',bg="white")
        tisillin.place(x='10',y='330')
        sillintipo=IntVar()
        concavo=Radiobutton(win,text='Concavo',variable=sillintipo,value=0)
        concavo.place(x='100',y='330')
        convexo=Radiobutton(win,text='Convexo',variable=sillintipo,value=1)
        convexo.place(x='100',y='350')
        plano=Radiobutton(win,text='Plano',variable=sillintipo,value=2)
        plano.place(x='100',y='370')
    
        tbiela=Label(win,text='LONGITUD DE BIELA ACTUAL (cm):',fg='black',bg="white")
        tbiela.place(x='10',y='420')
        lbiela=Entry(win)
        lbiela.place(x='200',y='420')

        tmanillar=Label(win,text='TIPO DE MANILLAR:',fg='black',bg="white")
        tmanillar.place(x='10',y='500')
        manillartipo=IntVar()
        ruta=Radiobutton(win,text='Ruta',variable=manillartipo,value=0)
        ruta.place(x='100',y='520')
        bmx=Radiobutton(win,text='BMX',variable=manillartipo,value=1)
        bmx.place(x='100',y='540')
        montana=Radiobutton(win,text='Montaña',variable=manillartipo,value=2)
        montana.place(x='100',y='560')
        

        
        def video1():
            print('entro1')
            video1=linke.get()
            print(video1)
            ruta=(video1 + '.mp4')
            print(ruta)
            cap2= cv2.VideoCapture(ruta)
            print('entro2')
            

            #video frontal
            frames=58
            global cont
            cont=0
            cont2=0
            frame=0
            global pdanglem
            pdanglem=0
            global adanglem
            adanglem=0
            global pdanglee
            pdanglee=0
            global adanglee 
            adanglee=0
            global pdangleh
            pdangleh=0
            global adangleh
            adangleh=0
            global pdangleb
            pdangleb=0
            global adangleb
            adangleb=0
            global ciclo
            ciclo=0
            global distanciarodilla1
            distanciarodilla1=0
            global distanciarodilla2
            distanciarodilla2=0
            global  distanciamano1
            distanciamano1=0
            global  distanciamano2
            distanciamano2=0
            global distanciacodo1
            distanciacodo1=0
            global distanciacodo2
            distanciacodo2=0
            global arodilla
            arodilla=0
            global arodi
            arodi=0
            global arodilla6
            arodilla6=0
            global arodilla10
            arodilla10=0
            global cont6
            cont6=0
            global conta
            conta=0
            global cont10
            cont10=0
            global plomada
            plomada=0
            global prodilla 
            prodilla=0
            global resta
            resta=0
            global desca1
            desca1=0
            global desca2
            desca2=0 
           
            
            while(cont2<38):

                #Captura frame por frame
                ret, frame = cap2.read()
                cont2=cont2+1
                print("FRAME:" )
                print(cont2)

                #MARCADORES VERDES 
                print("imagen en RGB:" )
                imag= cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                plt.imshow(imag)
                plt.show()
                colorhsv= cv2.cvtColor(imag, cv2.COLOR_RGB2BGR) #cambiar espacio de color  a BGR
                print("imagen en BGR:" )
                print(np.shape(colorhsv)) #tamaño de la imagen 

                colorhsv= cv2.cvtColor(imag, cv2.COLOR_BGR2Lab) # cambiar de BGR  a  Lab
                print("imagen en Lab:" )
                plt.imshow(colorhsv) 
                plt.show()

                colorluv=colorhsv[:,:,1] # unicamente el componente 1 de el espacio de color y en x, y todos los valores (tamaño de la imagen)
                print("imagen en gris:" )
                plt.imshow(colorluv,cmap='Greys')
                plt.show()
                print("Histograma  de la imagen:" )   
                plt.hist(colorluv.ravel())
                plt.show()

                colorluvsize=colorluv.shape # Tamaño de la imagen 
                color=list(colorluvsize) #crear matriz 
                valid=np.zeros((color[0],color[1])) #crea una matriz de ceros del tamaño de la imagen

                #Guardar la imagen como binaria
                for  x in range(color[0]):# recorrer en el eje x
                    for y in range(color[1]):# recorrer en el eje y para finalmente recorrer pixel por pixel

                        if colorluv[x,y]<100: #para que se quede con los tonos blancos de la imagen
                            valid[x,y]=1

                        else:
                            valid[x,y]=0

                print("Histograma  de la  mascara:" )           
                plt.hist(valid.ravel(),255,[0,255])
                plt.show()
                print("imagen valida (mascara)")
                plt.imshow(valid)
                plt.show() 


                #Crear una nueva variable del tamaño de la imagen original
                imagenfinal=np.array(imag)#np.zeros(np.shape(imag[0]),np.shape(imag[1]),np.shape(imag[2]))
                print("imagen inicial")
                plt.imshow(imag)
                plt.show()


                #Multiplico la mascara por la imagen original 
                imagenfinal[:,:,0]=valid*imag[:,:,0]
                imagenfinal[:,:,1]=valid*imag[:,:,1]
                imagenfinal[:,:,2]=valid*imag[:,:,2]

                print("imagen final")
                plt.imshow(imagenfinal)
                plt.show() 

                #creación de imagen para mostrar la reconstrucción 
                fondo=imag

                #Proceso de dilación de la imagen para ver los marcadores mas grandes 
                imagbgr=cv2.cvtColor(imagenfinal, cv2.COLOR_RGB2BGR)
                kernel = np.ones((5,5), np.uint8) 
                img_dilation = cv2.dilate(imagenfinal, kernel, iterations=1)

                print("imagen dilatada")
                plt.imshow(img_dilation)
                plt.show() 

                gris= cv2.cvtColor(img_dilation, cv2.COLOR_BGR2GRAY)

                #Función para encontrar contornos 
                #ret, thresh = cv2.threshold(gris, 0,255,0) # El tercer argumento es el valor maxVal

                ret,thresh = cv2.threshold(gris,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
                #que representa el valor que debe darse si el valor de píxel es mayor que (a veces menor que) el valor de umbral.
                im2, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                #Dibujar los contornos en la imagen 
                print("Se detectaron: {0} contornos".format(len(contours))) 
                img_contours = img_dilation.copy()
                img_contours = cv2.drawContours(img_contours, contours, -1, (255, 0, 0), 3)
                print("contornos:" )
                plt.imshow(img_contours)

                #crear vectores para guardar la posición de cada marcador(nombrar marcadores)
                global knel
                knel=np.zeros((2,1))
                global lasi
                lasi=np.zeros((2,1))
                global rasi
                rasi=np.zeros((2,1))
                global kner
                kner=np.zeros((2,1))
                global shor
                shor=np.zeros((2,1))
                global shol
                shol=np.zeros((2,1))
                global lelb
                lelb=np.zeros((2,1))
                global relb
                relb=np.zeros((2,1))
                global lwra
                lwra=np.zeros((2,1))
                global lwrb
                lwrb=np.zeros((2,1))
                global cab
                cab=np.zeros((2,1))
                global rodit1
                rodit1=np.zeros((2,1))
                global rodit2
                rodit2=np.zeros((2,1))
                global rodi1
                rodi1=np.zeros((2,1))
                global rodi2
                rodi2=np.zeros((2,1))
                global munecat1
                munecat1=np.zeros((2,1))
                global muneca1
                muneca1=np.zeros((2,1))
                global muneca2
                muneca2=np.zeros((2,1))
                global mat1
                mat1=np.zeros((2,1))
                global ma1
                ma1=np.zeros((2,1))
                global mat2
                mat2=np.zeros((2,1))
                global ma2
                ma2=np.zeros((2,1))
                global mat3
                mat3=np.zeros((2,1))
                global ma3
                ma3=np.zeros((2,1))
                global mat4
                mat4=np.zeros((2,1))
                global ma4
                ma4=np.zeros((2,1))
                global hombrot1
                hombrot1=np.zeros((2,1))
                global hombrot2
                hombrot2=np.zeros((2,1))
                global hombro1
                hombro1=np.zeros((2,1))
                global hombro2
                hombro2=np.zeros((2,1))
                global medio
                medio=np.zeros((2,1))
                global menor
                menor =np.zeros((2,1))
                global mayor
                mayor=np.zeros((2,1))
                global maximo
                maximo=np.zeros((2,1))
                global horizontalp1
                horizontalp1=np.zeros((2,1))
                global horizontalp2
                horizontalp2=np.zeros((2,1))


                #buscar los centros de masa de cada contorno 
                for i in range(len(contours)): 
                    print(i)
                    cnt = contours[i]
                    M = cv2.moments(cnt)

                    if M['m00']>0:
                        cx = int(M['m10']/M['m00'])
                        cy = int(M['m01']/M['m00'])
                        print(cx,cy)

                        if i==0:
                            rodit1=(cx,cy)
                            rodi1[0]=cx
                            rodi1[1]=cy


                        if i==1:
                            rodit2=(cx,cy)
                            rodi2[0]=cx
                            rodi2[1]=cy

                            if(rodi1[0] < rodi2[0]):
                                    knel=rodit1
                                    kner=rodit2
                            else:
                                    knel=rodit2
                                    kner=rodit1

                            print('rodilla izquierda')
                            print(knel)
                            print('rodilla  derecha')
                            print(kner)



                        if i==2:
                            munecat1=(cx,cy)
                            muneca1[0]=cx
                            muneca1[1]=cy

                        if i==3:
                            munecat2=(cx,cy)
                            muneca2[0]=cx
                            muneca2[1]=cy

                            if(muneca1[0] < muneca2[0]):
                                    lwra=munecat1
                                    lwrb=munecat2
                            else:
                                    lwra=munecat2
                                    lwrb=munecat1

                            print('muñeca izquierda')
                            print(lwra)
                            print('muñeca derecha')
                            print(lwrb)


                        if i==4:
                            mat1=(cx,cy)
                            ma1[0]=cx
                            ma1[1]=cy

                        if i==5:
                            mat2=(cx,cy)
                            ma2[0]=cx
                            ma2[1]=cy

                        if i==6:
                            mat3=(cx,cy)
                            ma3[0]=cx
                            ma3[1]=cy

                        if i==7:
                            mat4=(cx,cy)
                            ma4[0]=cx
                            ma4[1]=cy

                            if(ma1[0]< ma2[0] and ma1[0]< ma3[0] and ma1[0] < ma4[0]):
                                menor=mat1
                                if (ma2[0]< ma3[0] and ma2[0]<ma4[0]):
                                    medio=mat2
                                    if ma3[0]<ma4[0]:
                                        mayor=mat3
                                        maximo=mat4
                                    elif ma4[0]<ma3[0]:
                                        mayor=mat4
                                        maximo=mat3

                                elif (ma3[0]<ma2[0] and ma3[0]< ma4[0]):
                                    medio=mat3
                                    if ma2[0]<ma4[0]:
                                        mayor=mat2
                                        maximo=mat4
                                    elif ma4[0]<ma2[0]:
                                        mayor=mat4
                                        maximo=mat2

                                elif (ma4[0]<ma2[0] and ma4[0]< ma3[0]):
                                    medio=mat4
                                    if ma2[0]<ma3[0]:
                                        mayor=mat2
                                        maximo=mat3
                                    elif ma3[0]<ma2[0]:
                                        mayor=mat3
                                        maximo=mat2 


                            elif (ma2[0]< ma1[0] and ma2[0]< ma3[0] and ma2[0] < ma4[0]):
                                menor=mat2
                                if (ma1[0]< ma3[0] and ma1[0]<ma4[0]):
                                    medio=mat1
                                    if ma3[0]<ma4[0]:
                                        mayor=mat3
                                        maximo=mat4
                                    elif ma4[0]<ma3[0]:
                                        mayor=mat4
                                        maximo=mat3

                                elif (ma3[0]<ma1[0] and ma3[0]< ma4[0]):
                                    medio=mat3
                                    if ma1[0]<ma4[0]:
                                        mayor=mat1
                                        maximo=mat4
                                    elif ma4[0]<ma1[0]:
                                        mayor=mat4
                                        maximo=mat1

                                elif (ma4[0]<ma1[0] and ma4[0]< ma3[0]):
                                    medio=mat4
                                    if  ma1[0]<ma3[0]:
                                        mayor=mat1
                                        maximo=mat3
                                    elif ma3[0]<ma1[0]:
                                        mayor=mat3
                                        maximo=mat1

                            elif (ma3[0]< ma1[0] and ma3[0]< ma2[0] and ma3[0]< ma4[0]):
                                menor=mat3
                                if (ma1[0]< ma2[0] and ma1[0]<ma4[0]):
                                    medio=mat1
                                    if ma2[0]<ma4[0]:
                                        mayor=mat2
                                        maximo=mat4
                                    elif ma4[0]<ma2[0]:
                                        mayor=mat4
                                        maximo=mat2

                                elif (ma2[0]<ma1[0] and ma2[0]< ma4[0]):
                                    medio=mat2
                                    if ma1[0]<ma4[0]:
                                        mayor=mat1
                                        maximo=mat4
                                    elif ma4[0]<ma1[0]:
                                        mayor=mat4
                                        maximo=mat1

                                elif (ma4[0]<ma1[0] and ma4[0]< ma2[0]):
                                    medio=mat4
                                    if  ma1[0]<ma2[0]:
                                        mayor=mat1
                                        maximo=mat2
                                    elif ma2[0]<ma1[0]:
                                        mayor=mat2
                                        maximo=mat1

                            elif (ma4[0]< ma1[0] and ma4[0]< ma2[0] and ma4[0] < ma3[0]):
                                menor=mat4
                                if (ma1[0]< ma2[0] and ma1[0]<ma3[0]):
                                    medio=mat1
                                    if ma2[0]<ma3[0]:
                                        mayor=mat2
                                        maximo=mat3
                                    elif ma3[0]<ma2[0]:
                                        mayor=mat3
                                        maximo=mat2

                                elif (ma2[0]<ma1[0] and ma2[0]< ma3[0]):
                                    medio=mat2
                                    if ma1[0]<ma3[0]:
                                        mayor=mat1
                                        maximo=mat3
                                    elif ma3[0]<ma1[0]:
                                        mayor=mat3
                                        maximo=mat1

                                elif (ma3[0]<ma1[0] and ma3[0]< ma2[0]):
                                    medio=mat3
                                    if  ma1[0]<ma2[0]:
                                        mayor=mat1
                                        maximo=mat2
                                    elif ma2[0]<ma1[0]:
                                        mayor=mat2
                                        maximo=mat1
                            lelb=menor
                            lasi=medio
                            rasi=mayor
                            relb=maximo

                            centropx=((lasi[0]+rasi[0])/2)
                            centropy=((lasi[1]+rasi[1])/2)
                            unionp=(centropx,centropy)

                            print('codo izquierdo')
                            print(lelb)
                            print('pelvis izquierda')
                            print(lasi)
                            print('pelvis derecha')
                            print(rasi)
                            print('codo derecho')
                            print(relb)    

                        if i==8:
                            hombrot1=(cx,cy)
                            hombro1[0]=cx
                            hombro1[1]=cy

                        if i==9:
                            hombrot2=(cx,cy)
                            hombro2[0]=cx
                            hombro2[1]=cy

                            if(hombro1[0] < hombro2[0]):
                                    shol=hombrot1
                                    shor=hombrot2
                                    centrox=((hombro1[0]+hombro2[0])/2)
                                    centroy=((hombro1[1]+hombro2[1])/2)
                                    union=(centrox,centroy)
                            else:
                                    shol=hombrot2
                                    shor=hombrot1
                                    centrox=((hombro1[0]+hombro2[0])/2)
                                    centroy=((hombro1[1]+hombro2[1])/2)
                                    union=(centrox,centroy)


                            print('hombro izquierdo')
                            print(shol)
                            print('hombro derecha')
                            print(shor)

                        if i==10:
                            cab=(cx,cy)
                            print('cabeza')


                            lineThickness = 6
                            cv2.line(fondo, (shor), (shol), (0,255,0), lineThickness)#
                            cv2.line(fondo, (lelb), (lwra), (0,255,0), lineThickness)#
                            cv2.line(fondo, (relb), (lwrb), (0,255,0), lineThickness)#
                            cv2.line(fondo, (lelb), (shol), (0,255,0), lineThickness)#
                            cv2.line(fondo, (relb), (shor), (0,255,0), lineThickness)#
                            cv2.line(fondo, (shor), (rasi), (0,255,0), lineThickness)#
                            cv2.line(fondo, (shol), (lasi), (0,255,0), lineThickness)#
                            cv2.line(fondo, (rasi), (lasi), (0,255,0), lineThickness)#
                            cv2.line(fondo, (knel), (lasi), (0,255,0), lineThickness)
                            cv2.line(fondo, (kner), (rasi), (0,255,0), lineThickness)
                            cv2.line(fondo, (cab), (union), (0,255,0), lineThickness)
                            plt.imshow(fondo)
                            plt.show()
                            
                            path =r'C:\bikefitl'
                            cv2.imwrite(os.path.join(path ,"frame%d.jpg" % cont2), fondo)
                            cv2.waitKey(0)


                            
                            

                    
                            #Evaluar que las manos esten al ancho de los hombros 
                            if (lwra[0]<= shol[0]):
                                distanciamano1=1
                                print('ubicación correcta de la mano derecha')
                            else:
                                distanciamano1=0
                                print('ubique la mano al ancho de los hombros')

                            if (lwrb[0]>= shor[0]):
                                distanciamano2=1
                                print('ubicación correcta de la mano izquierda')
                            else:
                                distanciamano2=0
                                print('ubique la mano al ancho de los hombros')


                           #Evaluar posición de los codos
                            if (lelb[0]<= shol[0]):
                                distanciacodo1=1
                                print('ubicación correcta del codo derecho')
                            else:
                                distanciacodo1=0
                                print('ubique el codo por lo menos al ancho de los hombros')

                            if (relb[0]>= shor[0]):
                                ditanciacodo2=1
                                print('ubicación correcta del codo izquierdo')
                            else:
                                distanciacodo2=0
                                print('ubique el codo  al ancho de los hombros')

                            #Evaluar posición de las rodillas 

                            if (knel[0]>=lasi[0]):
                                distanciarodilla1=1
                                print('ubicación correcta de la rodilla derecha')
                            else:
                                distanciarodila1=0
                                print('suba el sillin')

                            if (kner[0]<=rasi[0]):
                                distanciarodilla2=1
                                print('ubicación correcta de la rodilla izquierda')
                            else:
                                distanciarodilla2=0
                                print('suba el sillin')

                            #Evaluar posición de la cadera 
                            #pelvis derecha 
                            horizontalp1=(0,unionp[1])
                            v10= np.array(horizontalp1)- np.array(unionp) 
                            v11= np.array(lasi) - np.array(unionp) 

                            anglec1= np.math.atan2(np.linalg.det([v10,v11]),np.dot(v10,v11))
                            danglec1=abs(np.degrees(anglec1))

                            print('ángulo de la cadera derecha: ')
                            print(danglec1)

                            #pelvis izquierda 
                            horizontalp2=(800,unionp[1])
                            v12= np.array(horizontalp2)- np.array(unionp) 
                            v13= np.array(rasi) - np.array(unionp) 

                            anglec2= np.math.atan2(np.linalg.det([v12,v13]),np.dot(v12,v13))
                            danglec2=abs(np.degrees(anglec2))

                            print('ángulo de la cadera izquierda: ')
                            print(danglec2)
                            
                           

                            if (danglec1<=10):
                                desca1=1
                                print('altura de sillín apropiado')

                            else:
                                desca1=0
                                print('baje el sillin, esta muy alto ')


                            if (danglec2<=10):
                                desca2=1
                                print('altura de sillín apropiado')

                            else:
                                desca2=0
                                print('baje el sillin, esta muy alto ')



                           #alineación de los hombros 

                            resta= abs(shor[1]-shol[1])
                            if (resta<=10):
                                print('hombros alineados')
                            else:
                                if (shor[1]<shol[1]):
                                    print('esta realizando mayor apoyo en el brazo derecho')

                                elif (shol[1]<shor[1]):
                                    print('esta realizando mayor apoyo en el brazo izquierdo')

                            print(resta)    




                #Finalizar el video 


                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            cap2.release()
            cv2.destroyAllWindows()
            
            

        
        def video2():
             #VIDEO LATERAL
            video2=linkes.get()
            print(video2)
            ruta=(video2 + '.mp4')
            print(ruta)
            cap= cv2.VideoCapture(ruta)
            print('entro2')
            
            frames=50
            global cont
            cont=0
            cont2=0
            frame=0
            global pdanglem
            pdanglem=0
            global adanglem
            adanglem=0
            global pdanglee
            pdanglee=0
            global adanglee 
            adanglee=0
            global pdangleh
            pdangleh=0
            global adangleh
            adangleh=0
            global pdangleb
            pdangleb=0
            global adangleb
            adangleb=0
            global ciclo
            ciclo=0
            global distanciarodilla
            distanciarodilla1=0
            global distanciarodilla2
            distanciarodilla2=0
            global arodilla
            arodilla=0
            global arodi
            arodi=0
            global arodilla6
            arodilla6=0
            global arodilla10
            arodilla10=0
            global cont6
            cont6=0
            global conta
            conta=0
            global cont10
            cont10=0
            global cont11
            cont11=0
            global plomada
            plomada=0
            global prodilla 
            prodilla=0
            global arodillae
            arodillae=0
            global arodillaee
            arodillaee=0
            global aempuje
            aempuje=0
            global adanglef
            adanglef=0
            global pdanglef
            pdanglef=0

            while(cont<frames):
            
                #Captura frame por frame
                ret, frame = cap.read()
                cont=cont+1
                print("FRAME:" )
                print(cont)

                #MARCADORES VERDES 
                print("imagen en RGB:" )
                imag= cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                plt.imshow(imag)
                plt.show()
                colorhsv= cv2.cvtColor(imag, cv2.COLOR_RGB2BGR) #cambiar espacio de color  a BGR
                print("imagen en BGR:" )
                print(np.shape(colorhsv)) #tamaño de la imagen 

                colorhsv= cv2.cvtColor(imag, cv2.COLOR_BGR2Lab) # cambiar de BGR  a  Lab
                print("imagen en Lab:" )
                plt.imshow(colorhsv) 
                plt.show()

                colorluv=colorhsv[:,:,1] # unicamente el componente 1 de el espacio de color y en x, y todos los valores (tamaño de la imagen)
                print("imagen en gris:" )
                plt.imshow(colorluv,cmap='Greys')
                plt.show()
                print("Histograma  de la imagen:" )   
                plt.hist(colorluv.ravel())
                plt.show()

                colorluvsize=colorluv.shape # Tamaño de la imagen 
                color=list(colorluvsize) #crear matriz 
                valid=np.zeros((color[0],color[1])) #crea una matriz de ceros del tamaño de la imagen

                #Guardar la imagen como binaria
                for  x in range(color[0]):# recorrer en el eje x
                    for y in range(color[1]):# recorrer en el eje y para finalmente recorrer pixel por pixel

                        if colorluv[x,y]<100: #para que se quede con los tonos blancos de la imagen
                            valid[x,y]=1

                        else:
                            valid[x,y]=0

                print("Histograma  de la  mascara:" )           
                plt.hist(valid.ravel(),255,[0,255])
                plt.show()
                print("imagen valida (mascara)")
                plt.imshow(valid)
                plt.show() 


                #Crear una nueva variable del tamaño de la imagen original
                imagenfinal=np.array(imag)#np.zeros(np.shape(imag[0]),np.shape(imag[1]),np.shape(imag[2]))
                print("imagen inicial")
                plt.imshow(imag)
                plt.show()


                #Multiplico la mascara por la imagen original 
                imagenfinal[:,:,0]=valid*imag[:,:,0]
                imagenfinal[:,:,1]=valid*imag[:,:,1]
                imagenfinal[:,:,2]=valid*imag[:,:,2]

                print("imagen final")
                plt.imshow(imagenfinal)
                plt.show() 

                #creación de imagen para mostrar la reconstrucción 
                fondo=imag

                #Proceso de dilación de la imagen para ver los marcadores mas grandes 
                imagbgr=cv2.cvtColor(imagenfinal, cv2.COLOR_RGB2BGR)
                kernel = np.ones((5,5), np.uint8) 
                img_dilation = cv2.dilate(imagenfinal, kernel, iterations=1)

                print("imagen dilatada")
                plt.imshow(img_dilation)
                plt.show() 

                gris= cv2.cvtColor(img_dilation, cv2.COLOR_BGR2GRAY)

                #Función para encontrar contornos 
                ret,thresh = cv2.threshold(gris,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)# El tercer argumento es el valor maxVal
                #que representa el valor que debe darse si el valor de píxel es mayor que (a veces menor que) el valor de umbral.
                im2, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                #Dibujar los contornos en la imagen 
                print("Se detectaron: {0} contornos".format(len(contours))) 
                img_contours = img_dilation.copy()
                img_contours = cv2.drawContours(img_contours, contours, -1, (255, 0, 0), 3)
                print("contornos:" )
                plt.imshow(img_contours)

                #crear vectores para guardar la posición de cada marcador(nombrar marcadores)
                global metatarsianos
                metatarsianos=np.zeros((2,1))
                global tobillo
                tobillo=np.zeros((2,1))
                global rodilla
                rodilla=np.zeros((2,1))
                global pelvis
                pelvis=np.zeros((2,1))
                global sacro
                sacro=np.zeros((2,1))
                global mano
                mano=np.zeros((2,1))
                global codo
                codo=np.zeros((2,1))
                global hombro
                hombro=np.zeros((2,1))
                global t10
                t10=np.zeros((2,1))
                global c7
                c7=np.zeros((2,1))
                global sillin 
                sillin=np.zeros((2,1))
                global cabeza
                cabeza=np.zeros((2,1))
                global pedal
                pedal=np.zeros((2,1))
                global marc1
                marc1=np.zeros((2,1))
                global marc2
                marc2=np.zeros((2,1))
                global marc3
                marc3=np.zeros((2,1))
                global marca
                marca=np.zeros((2,1))
                global marcb
                marcb=np.zeros((2,1))
                global marcc
                marcc=np.zeros((2,1))
                global marct1
                marct1=np.zeros((2,1))
                global marct2
                marct2=np.zeros((2,1))
                global marct3
                marct3=np.zeros((2,1))
                global marcta
                marcta=np.zeros((2,1))
                global marctb
                marctb=np.zeros((2,1))
                global marctc
                marctc=np.zeros((2,1))
                global horizontal
                horizontal=np.zeros((2,1))
               


                #buscar los centros de masa de cada contorno 
                for i in range(len(contours)): 
                    print(i)
                    cnt = contours[i]
                    M = cv2.moments(cnt)

                    if M['m00']>0:
                        cx = int(M['m10']/M['m00'])
                        cy = int(M['m01']/M['m00'])
                        print(cx,cy)


                        if i==0:
                            pedal=(cx,cy)
                            print('pedal')
                            if (pedal==biela):
                                ciclo=ciclo+1


                        if i==1:
                            metatarsianos=(cx,cy)
                            print('metatarsianos')


                        if i==2:
                            tobillo=(cx,cy)
                            print('tobillo')


            #Diferenciar rodilla ,mano y sillin 
            # El que este mas a la izquierda mano y mas a la derecha sillin

                        if i==3:
                            marct1=(cx,cy)
                            marc1[0]=cx
                            marc1[1]=cy

                        if i==4:
                            marct2=(cx,cy)
                            marc2[0]=cx
                            marc2[1]=cy

                        if i==5:
                            marct3=(cx,cy)
                            marc3[0]=cx
                            marc3[1]=cy 

                            if(marc1[0] < marc2[0] and marc1[0]< marc3[0]):
                                menor=marct1
                                if marc2[0]< marc3[0]:
                                    medio=marct2
                                    mayor=marct3
                                else:
                                    medio=marct3
                                    mayor=marct2

                            elif (marc2[0]< marc1[0] and marc2[0] < marc3[0]): 
                                menor=marct2
                                if marc1[0] < marc3[0]:
                                    medio=marct1
                                    mayor=marct3
                                else:
                                    medio=marct3
                                    mayor=marct1
                            elif(marc3[0] < marc1[0] and marc3[0] < marc2[0]):
                                menor=marct3
                                if marc1[0]< marc2[0]:
                                    medio=marct1
                                    mayor=marct2
                                else:
                                    medio=marct2
                                    mayor=marct1

                            mano=menor
                            rodilla=medio
                            sillin=mayor

                            print('mano')
                            print(mano)
                            print('rodilla')
                            print(rodilla)
                            print('sillin')
                            print(sillin)


             #para diferenciar codo, pelvis y sacro    
                        if i==6:
                            marcta=(cx,cy)
                            marca[0]=cx
                            marca[1]=cy

                        if i==7:
                            marctb=(cx,cy)
                            marcb[0]=cx
                            marcb[1]=cy

                        if i==8:
                            marctc=(cx,cy)
                            marcc[0]=cx
                            marcc[1]=cy

                            if(marca[0] < marcb[0] and marca[0]< marcc[0]):
                                menor1=marcta
                                if marcb[0]< marcc[0]:
                                    medio1=marctb
                                    mayor1=marctc
                                else:
                                    medio1=marctc
                                    mayor1=marctb

                            elif (marcb[0]< marca[0] and marcb[0] < marcc[0]): 
                                menor1=marctb
                                if marca[0] < marcc[0]:
                                    medio1=marcta
                                    mayor1=marctc
                                else:
                                    medio1=marctc
                                    mayor1=marcta
                            elif(marcc[0] < marca[0] and marcc[0] < marcb[0]):
                                menor1=marctc
                                if marca[0]< marcb[0]:
                                    medio1=marcta
                                    mayor1=marctb
                                else:
                                    medio1=marctb
                                    mayor1=marcta

                            codo=menor1
                            pelvis=medio1
                            sacro=mayor1       
                            print('codo')
                            print(codo)
                            print('pelvis')
                            print(pelvis)
                            print('sacro')
                            print(sacro)

                        if i==9:
                            t10=(cx,cy)
                            print('t10')


                        if i==10:
                            hombro=(cx,cy)
                            print('hombro')


                        if i==11:
                            c7=(cx,cy)
                            print('c7')


                        if i==12:
                            cabeza=(cx,cy)
                            print('cabeza')
                            lineThickness = 6

                            cv2.line(fondo, (tobillo), (metatarsianos), (0,255,0), lineThickness)
                            cv2.line(fondo, (tobillo), (rodilla), (0,255,0), lineThickness)
                            cv2.line(fondo, (rodilla), (pelvis), (0,255,0), lineThickness)
                            cv2.line(fondo, (pelvis), (hombro), (0,255,0), lineThickness)
                            cv2.line(fondo, (hombro), (codo), (0,255,0), lineThickness)
                            cv2.line(fondo, (hombro), (cabeza), (0,255,0), lineThickness)
                            cv2.line(fondo, (codo), (mano), (0,255,0), lineThickness)
                            plt.imshow(fondo)
                            plt.show()
                            
                                           
                            path1 =r'C:\lateralrec'
                            cv2.imwrite(os.path.join(path1 ,"framel%d.jpg" % cont), fondo)
                            cv2.waitKey(0)
                            
                          
                          


                            #ángulos del programa:
                            conta=conta+1

                            # femur y tibia
                            v0 = np.array(pelvis) - np.array(rodilla) 
                            v1 = np.array(tobillo) - np.array(rodilla) 

                            anglef= np.math.atan2(np.linalg.det([v0,v1]),np.dot(v0,v1))
                            danglef=abs(np.degrees(anglef))

                            print('ángulo de la rodilla: ')
                            print (danglef)
                            adanglef=danglef+adanglef
                            pdanglef=(adanglef/conta)

                            #Fase con la biela a las 6 
                            biela2=(360,421)
                            if (pedal==biela2):#cambiara por biela 
                                cont6=cont6+1
                                arodilla=arodilla+danglef
                                arodilla6=(arodilla/cont6)
                                print('ángulo de la rodilla en la fase de tracción: ')                
                                print(arodilla6) 

                            #Fase con biela a las 10
                            pedal1=430
                            pedal2=351
                            if (pedal[1]>=pedal2):#cambiar por  biela e y 
                                if (pedal[0]>=pedal1): #cambiar por biela en x
                                    cont10=cont10+1
                                    arodi=arodi+danglef
                                    arodilla10=(arodi/cont10)
                                    print('ángulo de la rodilla con la biela en la fase de elevación: ') 
                                    print(arodilla10)

                            #Fase con la biela a las 9 (plomada de la rodilla) fase de empuje 
                            
                            
                            if (pedal[1]==pedal2): #cambiar por biela en y 
                                if (pedal[0]<=pedal1): #cambiar por biela en x 
                                    plomada=pedal[0]
                                    prodilla=rodilla[0]
                                    cont11=cont11+1
                                    arodillae=arodillae+danglef
                                    aempuje=(arodillae/cont11)
                                    print('ángulo de la rodilla en la fase de empuje: ')                
                                    print(aempuje) 
                                    print(danglef)
                                    print(arodillae)

                            #Brazo respecto al tronco

                            v2= np.array(mano) - np.array(hombro) 
                            v3 = np.array(sacro) - np.array(hombro) 

                            angleh= np.math.atan2(np.linalg.det([v2,v3]),np.dot(v2,v3))
                            dangleh=abs(np.degrees(angleh))

                            print('ángulo del brazo: ')
                            print(dangleh)

                            adangleh=adangleh+dangleh
                            print(adangleh)

                            pdangleh=(adangleh/conta)
                            print(pdangleh) 


                            # Antebrazo respecto al brazo
                            v4= np.array(hombro) - np.array(codo) 
                            v5 = np.array(mano) - np.array(codo) 

                            angleb= np.math.atan2(np.linalg.det([v4,v5]),np.dot(v4,v5))
                            dangleb=abs(np.degrees(angleb))

                            print('ángulo del antebrazo: ')
                            print(dangleb)

                            adangleb=adangleb+dangleb
                            print(adangleb)

                            pdangleb=(adangleb/conta)
                            print(pdangleb) 

                            # Espalda respecto a la horizontal  
                            horizontal=(0,sacro[1])
                            v6= np.array(horizontal) - np.array(sacro) 
                            v7 = np.array(c7) - np.array(sacro) 

                            anglee= np.math.atan2(np.linalg.det([v6,v7]),np.dot(v6,v7))
                            danglee=abs(np.degrees(anglee))

                            print('ángulo de la espalda: ')
                            print(danglee)

                            adanglee=adanglee+danglee
                            print(adanglee)

                            pdanglee=(adanglee/conta)
                            print(pdanglee) 


                            #metatarsianos y tobillo 
                            horizontal2=(800,metatarsianos[1])
                            v8= np.array(tobillo) - np.array(metatarsianos) 
                            v9= np.array(horizontal2) - np.array(metatarsianos) 

                            anglem= np.math.atan2(np.linalg.det([v8,v9]),np.dot(v8,v9))
                            danglem=abs(np.degrees(anglem))


                            print('ángulo del tobillo: ')
                            print(danglem)

                            adanglem=adanglem+danglem
                            print(adanglem)

                            pdanglem=(adanglem/conta)
                            print(pdanglem) 




                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            cap.release()
            cv2.destroyAllWindows()
    

    
        botonsubirv1=Button(win,text='Subir video',command=video1)
        botonsubirv1.pack()
        botonsubirv1.place(x='460',y='60')
    
    
        botonsubir2=Button(win,text='Subir video',command=video2)
        botonsubir2.pack()
        botonsubir2.place(x='460',y='120')

        
        def ventanaprueba():
        
            win.destroy()
            vprueba=Frame()
            vprueba.pack(fill='both',expand='true')
            vprueba.config(bg='white')
            vprueba.config(width='650',height='600')
            vprueba.config(cursor='man')
            nombreventana4=Label(vprueba,text='FASE DE PRUEBA',fg='black',bg="#b4d2e3",font='Helvetica 8 bold')
            nombreventana4.place(x='10',y='10')
                
            titulo2=Label(vprueba,text='RECONSTRUCCIÓN DEL MOVIMIENTO REALIZADO DURANTE SU CICLO DE PEDALEO',bg="white",fg='#943698',font='Helvetica 10 bold')
            titulo2.place(x='600',y='40')
            titulo5=Label(vprueba,text='Reconstrucción del movimiento frontal',fg='black',bg="white",font='Helvetica 8 bold')
            titulo5.place(x='970',y='60')
            
            
            def reconstruir1():
                path1 =r'C:\bikefitl'
                width = 480
                height = 848
                FPS = 10
                seconds = 2
                gv1=(nombre+'./recof.avi')

                fourcc = VideoWriter_fourcc(*'MP42')
                video = VideoWriter(gv1, fourcc, float(FPS), (width, height))
                listing = os.listdir(path1)    

                for _ in range(FPS*seconds):
                    for file in listing:
                        im = Image.open(file)   
                        im2=cv2.imread(file)
                        fram =im2
                        video.write(fram)
                video.release()
                
                ref = cv2.VideoCapture('recof.avi')

                for y in range(350):
                    ret, frame = ref.read()

                    cv2.imshow('frame',frame)

                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        break

                ref.release()
                cv2.destroyAllWindows()

                
            botonreconstruir1=Button(vprueba,text='Ver reconstrucción frontal',command=reconstruir1)
            botonreconstruir1.pack()
            botonreconstruir1.place(x='970',y='110')
            
            
            titulo6=Label(vprueba,text='Reconstrucción del movimiento lateral',fg='black',bg="white",font='Helvetica 8 bold')
            titulo6.place(x='600',y='60')
            
            
                        
            def reconstruir2():
                path1 =r'C:\lateralrec'
                width = 848
                height =480 
                FPS = 25
                seconds = 2
                gv=(nombre+'./rlat.avi')

                fourcc = VideoWriter_fourcc(*'MP42')
                videol= VideoWriter(gv, fourcc, float(FPS), (width, height))
                listing = os.listdir(path1)    

                for _ in range(FPS*seconds):
                    for file in listing:
                        im = Image.open(file)   
                        im3=cv2.imread(file)
                        fram2 =im3
                        videol.write(fram2)
                videol.release()
                
                rel= cv2.VideoCapture('rlat.avi')

                for y in range(500):
                    ret, frame = rel.read()

                    cv2.imshow('frame',frame)

                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        break

                rel.release()
                cv2.destroyAllWindows()
            
        
        
            
            botonreconstruir2=Button(vprueba,text='Ver reconstrucción lateral',command=reconstruir2)
            botonreconstruir2.pack()
            botonreconstruir2.place(x='600',y='110')
            
        
    
            titulo3=Label(vprueba,text='ÁNGULOS REALIZADOS EN CADA FASE DEL CICLO DE PEDALEO',fg='#943698',bg="white",font='Helvetica 10 bold')
            titulo3.place(x='10',y='60')
            ta1=Label(vprueba,text='Angulo de rodilla:',fg='black',bg="white")
            ta1.place(x='10',y='80')
            pdanglefs="{0:.3f}".format(pdanglef)
            tm1=Label(vprueba,text=pdanglefs,fg='black',bg="white")
            tm1.place(x='250',y='80')
            ta2=Label(vprueba,text='Angulo de rodilla en fase de Tracción:',fg='black',bg="white")
            ta2.place(x='10',y='100')
            arodilla6s="{0:.3f}".format(arodilla6)
            tm2=Label(vprueba,text=arodilla6s,fg='black',bg="white")
            tm2.place(x='250',y='100')
            ta3=Label(vprueba,text='Angulo de rodilla en fase de Elevación:',fg='black',bg="white")
            ta3.place(x='10',y='120')
            arodilla10s="{0:.3f}".format(arodilla10)
            tm3=Label(vprueba,text=arodilla10s,fg='black',bg="white")
            tm3.place(x='250',y='120')
            ta4=Label(vprueba,text='Angulo de rodilla en fase de Empuje:',fg='black',bg="white")
            ta4.place(x='10',y='140')
            aempujes="{0:.3f}".format(aempuje)
            tm4=Label(vprueba,text=aempujes,fg='black',bg="white")
            tm4.place(x='250',y='140')
            ta5=Label(vprueba,text='Angulo del brazo:',fg='black',bg="white")
            ta5.place(x='10',y='160')
            pdanglehs="{0:.3f}".format(pdangleh)
            tm5=Label(vprueba,text=pdanglehs,fg='black',bg="white")
            tm5.place(x='250',y='160')
            ta6=Label(vprueba,text='Angulo del codo:',fg='black',bg="white")
            ta6.place(x='10',y='180')
            pdanglebs="{0:.3f}".format(pdangleb)
            tm6=Label(vprueba,text=pdanglebs,fg='black',bg="white")
            tm6.place(x='250',y='180')
            ta7=Label(vprueba,text='Angulo de la espalda:',fg='black',bg="white")
            ta7.place(x='10',y='200')
            pdanglees="{0:.3f}".format(pdanglee)
            tm7=Label(vprueba,text=pdanglees,fg='black',bg="white")
            tm7.place(x='250',y='200')
            ta8=Label(vprueba,text='Angulo del tobillo:',fg='black',bg="white")
            ta8.place(x='10',y='220')
            pdanglems="{0:.3f}".format(pdanglem)
            tm8=Label(vprueba,text=pdanglems,fg='black',bg="white")
            tm8.place(x='250',y='220')
            
            
        #recomendaciones de ajuste 
            titulo4=Label(vprueba,text='RECOMENDACIONES DE AJUSTE DE SU BICICLETA ',fg='#943698',bg="white",font='Helvetica 10 bold')
            titulo4.place(x='10',y='260')

            #Cuantos pedaleos realizo la persona 
            print('ciclos de pedaleo totales:')
            print(ciclo)

            #UBICACION PIE CON PEDAL
            if (metatarsianos[0]==pedal[0]):
                r1=Label(vprueba,text='1. Posición del pie sobre el pedal correcta' ,fg='black',bg="white")
                r1.place(x='10',y='280')
            else:
                r1=Label(vprueba,text='1. Posición del pie sobre el pedal incorrecta, busque poner los metatarsianos sobre el centro del pedal' ,fg='black',bg="white")
                r1.place(x='10',y='280')

            # ÁNGULO DE TOBILLO 
            pdanglems="{0:.3f}".format(pdanglem)

            if (pdanglem<45 and pdanglem>20 ):
                r2=Label(vprueba,text='2. ángulo del tobillo apropiado:' ,fg='black',bg="white")
                r2.place(x='10',y='300')
                ar2=Label(vprueba,text=pdanglems,fg='black',bg="white")
                ar2.place(x='250',y='300')
                
            else:
                r2=Label(vprueba,text='2. ángulo del tobillo no apropiado:' ,fg='black',bg="white")
                r2.place(x='10',y='300')
                ar2=Label(vprueba,text=pdanglems,fg='black',bg="white")
                ar2.place(x='250',y='300')
                
            #ALINEACIÓN DEL SILLÍN (verificar que el sillín este horizontal)
            #en calibracion marcadores sp y sa

            if(sa[1]==sp[1]):
                r3=Label(vprueba,text='3. Silin alineado correctamente' ,fg='black',bg="white")
                r3.place(x='10',y='320')
            else:
                r3=Label(vprueba,text='3. Debe alinear el sillín (debe quedar totalmente horizontal)' ,fg='black',bg="white")
                r3.place(x='10',y='320')


            #ALTURA DEL SILLIN
            #Altura de sillín recomendada
            lpiernae=int(lpierna)
            lpiee=int(lpie)

            alturasillin=((lpiernae+lpiee)*0.88)
            r4=Label(vprueba,text='4.Altura del sillin recomendada:' ,fg='black',bg="white")
            r4.place(x='10',y='340')
            ar4=Label(vprueba,text=alturasillin,fg='black',bg="white")
            ar4.place(x='250',y='340')
            s1=Label(vprueba,text='cm',fg='black',bg="white")
            s1.place(x='290',y='340')


            #evaluar rotación de cadera y de rodillas

            suma1=(distanciarodilla1+distanciarodilla2)
            suma2=(desca1+desca2)

            if suma1>1:
                r5=Label(vprueba,text='5. No presenta rotacion en las rodillas' ,fg='black',bg="white")
                r5.place(x='10',y='360')
            else:
                rsillin=0
                r5=Label(vprueba,text='5. Presenta rotacion en las rodillas' ,fg='black',bg="white")
                r5.place(x='10',y='360')

            if suma2>1:
                r6=Label(vprueba,text='6. No presenta rotación en la cadera' ,fg='black',bg="white")
                r6.place(x='10',y='380')

            else:
                r6=Label(vprueba,text=' 6. Presenta rotación en la cadera' ,fg='black',bg="white")
                r6.place(x='10',y='380')
                rsillin=0
              

            #Cantidad en cm que debe subir el sillin 
            csillin1=0
            csillin=0
            c=0
            a=0
            b=0


            if (arodilla6<150 and arodilla6>140):
                print('subir sillin')
                csillin1=1
                a=1
            if (arodilla6<141 and arodilla6>130):
                print('subir sillin')
                csillin1=2
                a=1
            if (arodilla6<131 and arodilla6>99):
                print('subir sillin')
                csillin1=3
                a=1

            if (arodilla10<90 and arodilla10>80):
                print('subir sillin')
                csillin=1
                b=1
            if (arodilla10<81 and arodilla10>70):
                print('subir sillin')
                csillin=2
                b=1
            if (arodilla10<71 and arodilla10>59):
                print('subir sillin') 
                csillin=3
                b=1

            if (arodilla6>155 and arodilla6<161):
                print('bajar sillin')
                csillin1=1
                a=2
            if (arodilla6>160 and arodilla6<171):
                print('bajar sillin')
                csillin1=2
                a=2
            if (arodilla6>170 and arodilla6<181):
                print('bajar sillin')
                csillin1=3
                a=2

            if (arodilla10>120 and arodilla10<124):
                print('bajar sillin')
                csillin=1
                b=2
            if (arodilla10>123 and arodilla10<127):
                print('bajar sillin')
                csillin=2
                b=2
            if (arodilla10>126 and arodilla10<131):
                print('bajar sillin')
                csillin=3
                b=2

            if (arodilla6<156 and arodilla6>149):
                print('sillin correcto 6')
                csillin1=0
                a=0
            if (arodilla10>89 and arodilla10<121):
                print('sillin correcto 10')
                csillin=0
                b=0

            correccion=(csillin+csillin1)/2
            c=a+b

            if (c==0):
                r7=Label(vprueba,text='7. Sillín en la altura apropiada' ,fg='black',bg="white")
                r7.place(x='10',y='400')
                print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                print('ángulo de la rodilla en la fase de empjue:',aempuje)
            elif (c==1):
                r7=Label(vprueba,text='7. Sillín bajo, debe subir el sillin' ,fg='black',bg="white")
                r7.place(x='10',y='400')
                ar7=Label(vprueba,text=correccion,fg='black',bg="white")
                ar7.place(x='250',y='400')
                cm7=Label(vprueba,text='cm',fg='black',bg="white")
                cm7.place(x='270',y='400')

                print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                print('ángulo de la rodilla en la fase de empjue:',aempuje)
            elif (c==2):
                if (a==1 and b==1):
                    r7=Label(vprueba,text='7. Sillín bajo, debe subir el sillin' ,fg='black',bg="white")
                    r7.place(x='10',y='400')
                    ar7=Label(vprueba,text=correccion,fg='black',bg="white")
                    ar7.place(x='250',y='400')
                    cm7=Label(vprueba,text='cm',fg='black',bg="white")
                    cm7.place(x='270',y='400')
                    
                    print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                    print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                    print('ángulo de la rodilla en la fase de empjue:',aempuje)
                else:
                    r7=Label(vprueba,text='7. Sillín alto, debe bajar el sillin' ,fg='black',bg="white")
                    r7.place(x='10',y='400')
                    ar7=Label(vprueba,text=correccion,fg='black',bg="white")
                    ar7.place(x='250',y='400')
                    cm7=Label(vprueba,text='cm',fg='black',bg="white")
                    cm7.place(x='270',y='400')

                    print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                    print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                    print('ángulo de la rodilla en la fase de empjue:',aempuje)
            elif (c==3):
                r7=Label(vprueba,text='7.Deje el sillin igual,  se recomienda revisar el tamaño del cuadro' ,fg='black',bg="white")
                r7.place(x='10',y='400')              
                print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                print('ángulo de la rodilla en la fase de empjue:',aempuje)

            elif (c==4):
                r7=Label(vprueba,text='7. Sillín alto, debe bajar el sillin' ,fg='black',bg="white")
                r7.place(x='10',y='400')
                ar7=Label(vprueba,text=correccion,fg='black',bg="white")
                ar7.place(x='250',y='400')
                cm7=Label(vprueba,text='cm',fg='black',bg="white")
                cm7.place(x='270',y='400')

                print('ángulo de la rodilla en la fase de tracción:',arodilla6)
                print('ángulo de la rodilla en la fase de elevación/recobro:',arodilla10)
                print('ángulo de la rodilla en la fase de empjue:',aempuje)

            #Longitud de la biela recomendada
            lmusloe=int(lmuslo)
            lbielacm=(lmusloe*0.279)
            lbielamm=(lbielacm+125.95)
            lbielamms="{0:.3f}".format(lbielamm)
               
            r8=Label(vprueba,text='8. La longitud de bielas recomendada es de:' ,fg='black',bg="white")
            r8.place(x='10',y='420')
            ar8=Label(vprueba,text=lbielamms,fg='black',bg="white")
            ar8.place(x='250',y='420')
            mm8=Label(vprueba,text='mm',fg='black',bg="white")
            mm8.place(x='285',y='420')

            #Adelantar o retrasar el sillin
            pdanglehs="{0:.3f}".format(pdangleh)
            r9=Label(vprueba,text='9.El ángulo del brazo es de:' ,fg='black',bg="white")
            r9.place(x='10',y='440')
            ar9=Label(vprueba,text=pdanglehs,fg='black',bg="white")
            ar9.place(x='200',y='440')
            m9=Label(vprueba,text=', Este debe encontrarse entre 85°-90°',fg='black',bg="white")
            m9.place(x='240',y='440')


            if (pdangleh>84 and pdangleh<91):
                desplaza=0
            elif (pdangleh>82 and pdangleh<84):
                desplaza=1
            elif (pdangleh<83):
                desplaza=2 
            elif (pdangleh>90 and pdangleh<95):
                desplaza=1
            elif (pdangleh>94):
                desplaza=2 

            if plomada==prodilla:
                r10=Label(vprueba,text='10. Sillín en la posición correcta' ,fg='black',bg="white")
                r10.place(x='10',y='460')
           
                
            elif prodilla<=plomada:
                r10=Label(vprueba,text='10. Sillín adelantado , desplace el sillin hacia atras:' ,fg='black',bg="white")
                r10.place(x='10',y='460')
                c10=Label(vprueba,text=desplaza,fg='black',bg="white")
                c10.place(x='270',y='460')
                cm10=Label(vprueba,text='cm',fg='black',bg="white")
                cm10.place(x='300',y='460')
                
    
            elif prodilla>=plomada:
                
                r10=Label(vprueba,text='10.Sillín atrasado , desplace el sillin hacia adelante:' ,fg='black',bg="white")
                r10.place(x='10',y='460')
                c10=Label(vprueba,text=desplaza,fg='black',bg="white")
                c10.place(x='270',y='460')
                cm10=Label(vprueba,text='cm',fg='black',bg="white")
                cm10.place(x='300',y='460')

        
            #Altura del manillar

            asillin=sillin[1]
            amanillar=manillar[1]
            atmanillar=(asillin-amanillar)*0.1
            
            r11=Label(vprueba,text='11. La altura actual de su manillar es de :' ,fg='black',bg="white")
            r11.place(x='10',y='480')
            c11=Label(vprueba,text=atmanillar,fg='black',bg="white")
            c11.place(x='270',y='480')

            alturae=int(altura)

            if (alturae<171) :
                r12=Label(vprueba,text='12. Para su estatura la altura de su manillar debe estar entre 2 cm a -2cm.' ,fg='black',bg="white")
                r12.place(x='10',y='500')
    
                raltura=-2
                calculo=raltura-atmanillar
            
                if (calculo>=-4 and calculo<=0):

                    r13=Label(vprueba,text='altura de manillar correcta' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                else:
                    r13=Label(vprueba,text='altura de manillar incorrecta, ubique  el manillar:' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                    c13=Label(vprueba,text=calculo,fg='black',bg="white")
                    c13.place(x='270',y='520')
                    c13=Label(vprueba,text='cm debajo del sillín',fg='black',bg="white")
                    c13.place(x='300', y='520')
                    
                    print('9.altura de manillar incorrecta, ubique  el manillar',calculo,'cm debajo del sillín')
                              
                              
                              
            if (alturae>170 and alturae<181) :
                r12=Label(vprueba,text='12. Para su estatura la altura de su manillar debe estar entre -2 cm a -5cm , por debajo del sillin.' ,fg='black',bg="white")
                r12.place(x='10',y='500')
             
                raltura=-5
                calculo=raltura-atmanillar
                
                if (calculo>=-3 and calculo<=0):
                    r13=Label(vprueba,text='altura de manillar correcta' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                    print('9.altura de manillar correcta')
                else:
                    print('altura de manillar incorrecta, ubique el manillar',calculo,'cm debajo del sillín')
                    r13=Label(vprueba,text='altura de manillar incorrecta, ubique  el manillar:' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                    c13=Label(vprueba,text=calculo,fg='black',bg="white")
                    c13.place(x='270',y='520')
                    c13=Label(vprueba,text='cm debajo del sillín',fg='black',bg="white")
                    c13.place(x='300', y='520')
                              
            if (alturae>180):
                r12=Label(vprueba,text='12.Para su estatura la altura de su manillar debe estar entre -5cm a -8cm, por debajo del sillin' ,fg='black',bg="white")
                r12.place(x='10',y='500')
                              
                print('Para su estatura la altura de su manillar debe estar entre -5cm a -8cm,  , por debajo del sillin')
                raltura=-8
                calculo=raltura-atmanillar
                
                if (calculo>-3 and calculo<=0):
                    r13=Label(vprueba,text='altura de manillar correcta' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                    print('9.altura de manillar correcta')
                else:
                    print('altura de manillar incorrecta, ubique el manillar',calculo,'cm debajo del sillín')
                    r13=Label(vprueba,text='altura de manillar incorrecta, ubique  el manillar:' ,fg='black',bg="white")
                    r13.place(x='10',y='520')
                    c13=Label(vprueba,text=calculo,fg='black',bg="white")
                    c13.place(x='270',y='520')
                    c13=Label(vprueba,text='cm debajo del sillín',fg='black',bg="white")
                    c13.place(x='300', y='520')
                    

            #Inclinación de la espalda
            #diferencias entre sexo
            pdanglees="{0:.3f}".format(pdanglee)


            #maculino
            if genero==0:
                if pdanglee<=60 and pdanglee>=45:
                    r14=Label(vprueba,text='13. Inclinación de la espalda correcta, ángulo de la espalda:' ,fg='black',bg="white")
                    r14.place(x='650',y='280')
                    a14=Label(vprueba,text=pdanglees,fg='black',bg="white")
                    a14.place(x='1000',y='280')
                    r141=Label(vprueba,text='Los hombres deben mantener un ángulo entre 45 a 60°' ,fg='black',bg="white")
                    r141.place(x='650',y='300')
                    print('10.inclinación de la espalda correcta, ángulo de la espalda:',pdanglee)
                else:
                    r14=Label(vprueba,text='13. Inclinación de la espalda no adecuada, ángulo de la espalda:' ,fg='black',bg="white")
                    r14.place(x='650',y='280')
                    a14=Label(vprueba,text=pdanglees,fg='black',bg="white")
                    a14.place(x='1000',y='280')
                    r141=Label(vprueba,text='Los hombres deben mantener un ángulo entre 45 a 60°' ,fg='black',bg="white")
                    r141.place(x='650',y='300')
                   

            #femenino        
            else:
                if pdanglee<=60 and pdanglee>=35:
                    r14=Label(vprueba,text='13. Inclinación de la espalda correcta, ángulo de la espalda:' ,fg='black',bg="white")
                    r14.place(x='650',y='280')
                    a14=Label(vprueba,text=pdanglees,fg='black',bg="white")
                    a14.place(x='1000',y='280')
                    r141=Label(vprueba,text='Las mujeres deben mantener un ángulo entre 35 a 60°' ,fg='black',bg="white")
                    r141.place(x='650',y='300')
            
                else:
                    r14=Label(vprueba,text='13. inclinación de la espalda no adecuada, ángulo de la espalda:' ,fg='black',bg="white")
                    r14.place(x='650',y='280')
                    a14=Label(vprueba,text=pdanglees,fg='black',bg="white")
                    a14.place(x='1000',y='280')
                    r141=Label(vprueba,text='Las mujeres deben mantener un ángulo entre 35 a 60°' ,fg='black',bg="white")
                    r141.place(x='650',y='300')
                 

            #Curvatura de la columna (alineación correcta)

            if (c7[0]==t10[0]):
                r15=Label(vprueba,text='14. Posición de la columna adecuada' ,fg='black',bg="white")
                r15.place(x='650',y='320')
            elif (c7[0]>t10[0]) :                
                r15=Label(vprueba,text='14. Posición de la columna anormal, presenta una curvatura exagerada' ,fg='black',bg="white")
                r15.place(x='650',y='320')
            else:                
                r15=Label(vprueba,text='14. Posición de la columna anormal , presenta un encorvamiento' ,fg='black',bg="white")
                r15.place(x='650',y='320')


            # posición de sentado
            pdanglehs="{0:.3f}".format(pdangleh)

            if pdangleh==90:
                r16=Label(vprueba,text='15.Posición de sentado correcta, ángulo del brazo y torso debe ser 90°:' ,fg='black',bg="white")
                r16.place(x='650',y='340')
                a16=Label(vprueba,text=pdanglehs,fg='black',bg="white")
                a16.place(x='1050',y='340')
            else:
                r16=Label(vprueba,text='15. Posición de sentado incorrecta, ángulo del brazo y torso debe ser 90°:' ,fg='black',bg="white")
                r16.place(x='650',y='340')
                a16=Label(vprueba,text=pdanglehs,fg='black',bg="white")
                a16.place(x='1050',y='340')

            #alcance de las manos
            lbrazoe=int(lbrazo)
            lespaldae=int(lespalda)
            alcance=math.sqrt(((lbrazoe)**2)+((lespaldae)**2))
            alcances="{0:.3f}".format(alcance)
            r171=Label(vprueba,text='16. El alcance de posición de sentado según sus medidas es de:' ,fg='black',bg="white")
            r171.place(x='650',y='360')
            a171=Label(vprueba,text=alcances,fg='black',bg="white")
            a171.place(x='1000',y='360')
            a172=Label(vprueba,text='cm',fg='black',bg="white")
            a172.place(x='1030',y='360')
            r171=Label(vprueba,text='Esto quiere decir que de la parte de atras de su sillin hasta sus manos debe haber maximo, el alcance determinado' ,fg='black',bg="white")
            r171.place(x='650',y='380')

            # Agarre del manillar 
            #Ángulo de ante brazo
            pdanglebs="{0:.3f}".format(pdangleb)
            
            if pdangleb<=160 and  pdangleb>=144:
                r17=Label(vprueba,text='17.El ángulo del antebrazo debe tener valores entre 144° a 160°,  Ángulo de agarre adecuado:' ,fg='black',bg="white")
                r17.place(x='650',y='400')
                a17=Label(vprueba,text=pdanglebs,fg='black',bg="white")
                a17.place(x='1150',y='400')
           
            else:
                r17=Label(vprueba,text='17.El ángulo del antebrazo debe tener valores entre 144° a 160,Ángulo de agarre no apropiado:' ,fg='black',bg="white")
                r17.place(x='650',y='400')
                a17=Label(vprueba,text=pdanglebs,fg='black',bg="white")
                a17.place(x='1150',y='400')
               

            #Posición de las manos
            if distanciamano1==1:
                r18=Label(vprueba,text='18. Ubicación correcta de la mano derecha' ,fg='black',bg="white")
                r18.place(x='650',y='420')
            elif distanciamano1==0:
                r18=Label(vprueba,text='18. Ubique la mano derecha al ancho de los hombros' ,fg='black',bg="white")
                r18.place(x='650',y='420')
            if distanciamano2==1:
                r19=Label(vprueba,text='19.Ubicación correcta de la mano izquierda' ,fg='black',bg="white")
                r19.place(x='650',y='440')
            elif distanciamano2==0:
                r19=Label(vprueba,text='19. ubique la mano izquierda al ancho de los hombros' ,fg='black',bg="white")
                r19.place(x='650',y='440')

            #Posición de los codos
            if distanciacodo1==1:                
                r20=Label(vprueba,text='20. Ubicación correcta del codo derecho' ,fg='black',bg="white")
                r20.place(x='650',y='460')
            elif distanciacodo1==0:
                r20=Label(vprueba,text='20. Ubique el codo derecho al ancho de los hombros' ,fg='black',bg="white")
                r20.place(x='650',y='460')
            if distanciacodo2==1:
                r21=Label(vprueba,text='21. Ubicación correcta del codo izquierdo' ,fg='black',bg="white")
                r21.place(x='650',y='480')
            elif distanciacodo2==0:
                r21=Label(vprueba,text='21. Ubique el codo izquierdo al ancho de los hombros' ,fg='black',bg="white")
                r21.place(x='650',y='480')

            #Posición de los hombros 
            if (resta<=10):
                r22=Label(vprueba,text='22. Hombros alineados' ,fg='black',bg="white")
                r22.place(x='650',y='500')
            else:
                if (shor[1]<shol[1]):               
                    r22=Label(vprueba,text='22. Esta realizando mayor apoyo en el brazo derecho' ,fg='black',bg="white")
                    r22.place(x='650',y='500')
                elif (shol[1]<shor[1]):                    
                    r22=Label(vprueba,text='22. Esta realizando mayor apoyo en el brazo izquierdo' ,fg='black',bg="white")
                    r22.place(x='650',y='500')
                

            #Posición de la pelvis 

            des=abs(sillin[0]-sacro[0])

            if des<=5:
                r23=Label(vprueba,text='23.Ubicación correcta del cuerpo sobre el sillín' ,fg='black',bg="white")
                r23.place(x='650',y='520')
                
            else:
                r23=Label(vprueba,text='23.Ubicación inadecuada sobre el silin , ubique la pelvis en la parte mas trasera del sillín' ,fg='black',bg="white")
                r23.place(x='650',y='520')
            
            def guardar():
                #Crear excel
                archivo=(nombre+'Bikefitting.xlsx')
                
                workbook = xlsxwriter.Workbook(archivo)
                worksheet = workbook.add_worksheet()
                
                workbook.close()

            
             #Guardar datos en excel

                df = pd.DataFrame({'Nombre': [nombre],
                'cedula': [cedula], 'edad': [edad],'ángulo de rodilla':[pdanglef],'ángulo de rodilla en tracción':[arodilla6],
                                'ángulo de rodilla en elevación':[arodilla10],'ángulo de rodilla en empuje':[aempuje],
                                  'ángulo de brazo':[pdangleh], 'ángulo de codo':[pdangleb],
                                   'ángulo de espalda':[pdanglee], 'ángulo de tobillo':[pdanglem],
                                  'altura sillín recomendada':[alturasillin], 'longitud biela recomendada':[lbielamms],
                                  'desplazamiento de sillín recomendado':[desplaza],'altura de manillar':[atmanillar],
                                   'alcance posición de sentado':[alcances] })
                df = df[['Nombre', 'edad', 'ángulo de rodilla','ángulo de rodilla en tracción','ángulo de rodilla en elevación','ángulo de rodilla en empuje','ángulo de brazo','ángulo de codo','ángulo de espalda',
                         'ángulo de tobillo','altura sillín recomendada','longitud biela recomendada','desplazamiento de sillín recomendado','altura de manillar','alcance posición de sentado']]
                
                writer = ExcelWriter(archivo)
                df.to_excel(writer, sheet_name='Resultados', index=False)
               
                writer.save()
                
                #Crear ultima ventana 
              
            
                vprueba.destroy()
                last=Frame()
                last.pack(fill='both',expand='true')
                last.config(bg='white')
                last.config(width='650',height='600')
                last.config(cursor='man')
                
   
                imagenF=Label(last,image=imagenf,borderwidth=0)
                imagenF.place(x='50',y='0')
    
   


            
            botonseguir=Button(vprueba,text='Guardar Bikefitting',command=guardar)
            botonseguir.pack()
            botonseguir.place(x='600',y='600')
                
        
#Botones para seguir a cada una de las ventanas  
        botonseguir=Button(win,text='Siguiente',command=ventanaprueba)
        botonseguir.pack()
        botonseguir.place(x='500',y='600')
    
    
    botonseguir2=Button(vcalibracion,text='Siguiente',command=bicidatos)
    botonseguir2.pack()
    botonseguir2.place(x='400',y='600')
    
    

siguiente=Button(miframe,text='SIGUIENTE',command=vencalibracion)
siguiente.pack()
siguiente.place(x='190',y='600')


raiz.mainloop()

